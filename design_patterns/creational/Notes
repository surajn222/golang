// 1. Singleton
// struct singleton, var counter
// method addOne, increment counter
// Constuctor singleton struct

// var singletonVar *SingletonClass
// func getSingletonObject
// 		if nil, assign, else return


// 2. Factory
// Interface Shape, method Draw
// Implement Shape -> Circle
// Implement Shape -> Square
// getShape -> switch case -> Circle, Square


// 3. Abstract Factory
// Interface OS, variable button
// Implement OS -> MacOS
// Implement OS -> Windows

// Interface button, method paint
// Implement button, method paint
// Implement button, method paint

// main
// if variable:
//	MacOS.button.paint
//  Windows.button.paint


// 4. Builder
// builder := NewCarBuilder()
// builder = builder.Setbrand("B")
// builder = builder.SetModel("Model S")
// car 	   = builder.Build() // returns Car

// Based on the above
// object carbuilder
//	 	Setbrand return carbuilder,
//	    SetModel return carbuilder,
//	    Build return Car,
// 
// object Car, Brand, Model


// 5. Prototype
// interface Shape
// Shape implement Circle
//		Clone()
//		GetInfo()
// Shape implement Rectangle
//		Clone()
//		GetInfo()

// circle1Object = circle{}
// circle2Object = circle1Object.Clone()

// rectangeeObject = rectangle{}
// rectangle2Object = rectangle1Object.Clone()
